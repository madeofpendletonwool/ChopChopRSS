name: Build and Release ChopChopRSS

on:
  push:
    branches: [main]
    tags:
      - "v*"
  workflow_dispatch: # Allow manual trigger

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          check-latest: true

      - name: Set up version
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          echo "VERSION=v0.1.0-dev-$(date +'%Y%m%d%H%M%S')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Use tag as version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create install script
        run: |
          cat > install.sh << 'EOF'
          #!/bin/bash
          set -e

          # Detect OS and architecture
          OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
          ARCH="$(uname -m)"
          if [ "$ARCH" = "x86_64" ]; then
            ARCH="amd64"
          elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
            ARCH="arm64"
          else
            echo "Unsupported architecture: $ARCH"
            exit 1
          fi

          VERSION=$(curl -s https://api.github.com/repos/madeofpendletonwool/chopchoprss/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')

          echo "Installing ChopChopRSS $VERSION for $OS/$ARCH..."

          # Download binary
          TMP_DIR=$(mktemp -d)
          BINARY_URL="https://github.com/madeofpendletonwool/chopchoprss/releases/download/${VERSION}/chopchoprss_${OS}_${ARCH}.tar.gz"
          curl -sL "$BINARY_URL" -o "${TMP_DIR}/chopchoprss.tar.gz"
          tar -xzf "${TMP_DIR}/chopchoprss.tar.gz" -C "${TMP_DIR}"

          # Install binary
          INSTALL_DIR="$HOME/.local/bin"
          mkdir -p "$INSTALL_DIR"
          mv "${TMP_DIR}/chopchoprss" "$INSTALL_DIR/"
          chmod +x "$INSTALL_DIR/chopchoprss"

          # Setup shell completion if shell detected
          if [ -n "$SHELL" ]; then
            SHELL_NAME=$(basename "$SHELL")

            if [ "$SHELL_NAME" = "bash" ]; then
              echo "Setting up Bash completion..."
              COMPLETION_DIR="$HOME/.bash_completion.d"
              mkdir -p "$COMPLETION_DIR"
              "$INSTALL_DIR/chopchoprss" completion bash > "$COMPLETION_DIR/chopchoprss"

              # Add to .bashrc if not already there
              if ! grep -q "bash_completion.d/chopchoprss" "$HOME/.bashrc"; then
                echo "[ -f $COMPLETION_DIR/chopchoprss ] && source $COMPLETION_DIR/chopchoprss" >> "$HOME/.bashrc"
                echo "Added completion to .bashrc. Please restart your shell or run: source ~/.bashrc"
              fi

            elif [ "$SHELL_NAME" = "zsh" ]; then
              echo "Setting up Zsh completion..."
              ZSH_COMPLETION_DIR="$HOME/.zsh/completion"
              mkdir -p "$ZSH_COMPLETION_DIR"
              "$INSTALL_DIR/chopchoprss" completion zsh > "$ZSH_COMPLETION_DIR/_chopchoprss"

              # Add to .zshrc if not already there
              if ! grep -q "fpath=($ZSH_COMPLETION_DIR" "$HOME/.zshrc"; then
                echo "fpath=($ZSH_COMPLETION_DIR \$fpath)" >> "$HOME/.zshrc"
                echo "autoload -U compinit; compinit" >> "$HOME/.zshrc"
                echo "Added completion to .zshrc. Please restart your shell or run: source ~/.zshrc"
              fi

            elif [ "$SHELL_NAME" = "fish" ]; then
              echo "Setting up Fish completion..."
              FISH_COMPLETION_DIR="$HOME/.config/fish/completions"
              mkdir -p "$FISH_COMPLETION_DIR"
              "$INSTALL_DIR/chopchoprss" completion fish > "$FISH_COMPLETION_DIR/chopchoprss.fish"
              echo "Fish completion installed. It will be active in new shell sessions."
            fi
          fi

          # Check if the installation directory is in PATH
          if ! echo "$PATH" | tr ':' '\n' | grep -q "$INSTALL_DIR"; then
            echo
            echo "‚ö†Ô∏è  Warning: $INSTALL_DIR is not in your PATH."
            echo "Please add it to your PATH by adding this line to your shell configuration file:"
            echo
            echo "    export PATH=\"$INSTALL_DIR:\$PATH\""
            echo
          else
            echo
            echo "üéâ ChopChopRSS installed successfully in $INSTALL_DIR"
            echo "Run 'chopchoprss' to get started"
            echo
          fi

          # Clean up
          rm -rf "$TMP_DIR"
          EOF

          chmod +x install.sh

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          args: release --clean
          version: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload install script
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          files: |
            install.sh
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: goreleaser
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
